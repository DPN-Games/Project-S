package com.google.common.collect;

import com.google.common.base.Function;
import com.google.common.base.Preconditions;
import java.util.Collection;
import java.util.Iterator;

























































































































































































































































public final class Iterables
{
  public static String toString(Iterable<?> iterable)
  {
    return Iterators.toString(iterable.iterator());
  }
  
































  public static <T> T[] toArray(Iterable<? extends T> iterable, Class<T> type)
  {
    Collection<? extends T> collection = toCollection(iterable);
    T[] array = ObjectArrays.newArray(type, collection.size());
    return collection.toArray(array);
  }
  















  private static <E> Collection<E> toCollection(Iterable<E> iterable)
  {
    return (iterable instanceof Collection) ? (Collection)iterable : Lists.newArrayList(iterable.iterator());
  }
  
































































































































































































































































































































































































  public static <F, T> Iterable<T> transform(Iterable<F> fromIterable, final Function<? super F, ? extends T> function)
  {
    Preconditions.checkNotNull(fromIterable);
    Preconditions.checkNotNull(function);
    new FluentIterable()
    {
      public Iterator<T> iterator() {
        return Iterators.transform(val$fromIterable.iterator(), function);
      }
    };
  }
}
