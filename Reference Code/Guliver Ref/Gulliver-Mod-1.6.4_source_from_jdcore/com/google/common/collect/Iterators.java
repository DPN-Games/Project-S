package com.google.common.collect;

import com.google.common.base.Function;
import com.google.common.base.Objects;
import com.google.common.base.Preconditions;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import javax.annotation.Nullable;

























































public final class Iterators
{
  static final UnmodifiableListIterator<Object> EMPTY_LIST_ITERATOR = new UnmodifiableListIterator()
  {
    public boolean hasNext()
    {
      return false;
    }
    
    public Object next() {
      throw new NoSuchElementException();
    }
    
    public boolean hasPrevious() {
      return false;
    }
    
    public Object previous() {
      throw new NoSuchElementException();
    }
    
    public int nextIndex() {
      return 0;
    }
    
    public int previousIndex() {
      return -1;
    }
  };
  





  public static <T> UnmodifiableIterator<T> emptyIterator()
  {
    return emptyListIterator();
  }
  







  static <T> UnmodifiableListIterator<T> emptyListIterator()
  {
    return EMPTY_LIST_ITERATOR;
  }
  
  private static final Iterator<Object> EMPTY_MODIFIABLE_ITERATOR = new Iterator()
  {
    public boolean hasNext() {
      return false;
    }
    
    public Object next() {
      throw new NoSuchElementException();
    }
    
    public void remove() {
      throw new IllegalStateException();
    }
  };
  



























































  public static boolean contains(Iterator<?> iterator, @Nullable Object element)
  {
    if (element == null) {
      do { if (!iterator.hasNext()) break;
      } while (iterator.next() != null);
      return true;
    }
    

    while (iterator.hasNext()) {
      if (element.equals(iterator.next())) {
        return true;
      }
    }
    
    return false;
  }
  














































































  public static boolean elementsEqual(Iterator<?> iterator1, Iterator<?> iterator2)
  {
    while (iterator1.hasNext()) {
      if (!iterator2.hasNext()) {
        return false;
      }
      Object o1 = iterator1.next();
      Object o2 = iterator2.next();
      if (!Objects.equal(o1, o2)) {
        return false;
      }
    }
    return !iterator2.hasNext();
  }
  




  public static String toString(Iterator<?> iterator)
  {
    return ']';
  }
  





























































































































































































































































































































































































































































































































































  public static <F, T> Iterator<T> transform(Iterator<F> fromIterator, final Function<? super F, ? extends T> function)
  {
    Preconditions.checkNotNull(function);
    new TransformedIterator(fromIterator)
    {
      T transform(F from) {
        return function.apply(from);
      }
    };
  }
  























































































































































































































































  static <T> UnmodifiableListIterator<T> forArray(final T[] array, final int offset, int length, int index)
  {
    Preconditions.checkArgument(length >= 0);
    int end = offset + length;
    

    Preconditions.checkPositionIndexes(offset, end, array.length);
    





    new AbstractIndexedListIterator(length, index) {
      protected T get(int index) {
        return array[(offset + index)];
      }
    };
  }
  






  public static <T> UnmodifiableIterator<T> singletonIterator(@Nullable T value)
  {
    new UnmodifiableIterator() {
      boolean done;
      
      public boolean hasNext() {
        return !done;
      }
      
      public T next() {
        if (done) {
          throw new NoSuchElementException();
        }
        done = true;
        return val$value;
      }
    };
  }
  












































































































































































































































  static <T> ListIterator<T> cast(Iterator<T> iterator)
  {
    return (ListIterator)iterator;
  }
}
