package com.google.common.io;

import com.google.common.base.Preconditions;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;















































































































































































public final class ByteStreams
{
  public static long copy(InputStream from, OutputSupplier<? extends OutputStream> to)
    throws IOException
  {
    return asByteSink(to).writeFrom(from);
  }
  








  public static long copy(InputStream from, OutputStream to)
    throws IOException
  {
    Preconditions.checkNotNull(from);
    Preconditions.checkNotNull(to);
    byte[] buf = new byte['á€€'];
    long total = 0L;
    for (;;) {
      int r = from.read(buf);
      if (r == -1) {
        break;
      }
      to.write(buf, 0, r);
      total += r;
    }
    return total;
  }
  































  public static byte[] toByteArray(InputStream in)
    throws IOException
  {
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    copy(in, out);
    return out.toByteArray();
  }
  

































































































































































































































































































































  private static final OutputStream NULL_OUTPUT_STREAM = new OutputStream()
  {
    public void write(int b) {}
    

    public void write(byte[] b)
    {
      Preconditions.checkNotNull(b);
    }
    
    public void write(byte[] b, int off, int len) {
      Preconditions.checkNotNull(b);
    }
    
    public String toString()
    {
      return "ByteStreams.nullOutputStream()";
    }
  };
  






















































































































































































































































































































































































  static <S extends OutputStream> OutputSupplier<S> asOutputSupplier(ByteSink sink)
  {
    Preconditions.checkNotNull(sink);
    new OutputSupplier()
    {
      public S getOutput() throws IOException
      {
        return val$sink.openStream();
      }
    };
  }
  
  static ByteSource asByteSource(InputSupplier<? extends InputStream> supplier)
  {
    Preconditions.checkNotNull(supplier);
    new ByteSource()
    {
      public InputStream openStream() throws IOException {
        return (InputStream)val$supplier.getInput();
      }
    };
  }
  
  static ByteSink asByteSink(OutputSupplier<? extends OutputStream> supplier)
  {
    Preconditions.checkNotNull(supplier);
    new ByteSink()
    {
      public OutputStream openStream() throws IOException {
        return (OutputStream)val$supplier.getOutput();
      }
    };
  }
}
